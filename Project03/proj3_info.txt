
The required project materials ZIP file is here: project03_materials.zip

Download project03_materials.zip.

< Important Notes >

Start early to give yourself an opportunity to ask questions!!! 

Waiting to the last minute to begin the assignment is not recommended and will not get you an extension on the submission deadline. 

Debugging issues are far easier to resolve in person when we can see exactly what you and your code are doing. 

All CPE 212 projects are automatically graded in order to provided you timely feedback.  So, it is critical that you follow all directions for the preparation and submission of your projects for grading.  Failure to follow the directions may result in zero credit (0 points).

<Project03 Goals and Description>

As part of this assignment, you will once again practice implementing components that will be integrated to form a larger product.  This time you will write Stack class that will be integrated into a larger software product provided by the instructor.  This Stack class uses a dynamically allocated array to store data values (integers) that have been pushed onto the stack object.  When the client code attempts to push another integer onto a full stack, your Push operation should invoke the Resize() function which attempts to double the capacity of the stack and then add the new data value to the resized stack array.  In Resize() a new array (that holds twice as many integers) is dynamically allocated, data from the old stack array is copied into the new larger stack array, the old stack array is deallocated, and the new data value is pushed onto the new array.

-  Do not modify main.cpp or stack.h !!!      You will write stack.cpp !!!

- All program output is performed by the code in the main.cpp file – do not include any output statements in the files you write!!!

 

The interfaces to each of these functions you must write are described in detail on subsequent pages and in the files provided

Hint:   Match the output of your program to that of the sample solution!!!

          Directions for running the sample solution appear on the following page.

 

 Running the Sample Solution on blackhawk

The best description of what your code should do is the Sample Solution for the project. 

Run the sample solution by typing the following at blackhawk terminal window command prompt

/home/work/cpe212/project03/p03   inputfilename

where inputfilename is the name of one of the provided input files (for example, p03input1.txt).  Your current working directory must contain the input files for this to work.

Unzipping Sample Input Files on blackhawk

Use the Firefox browser to access Angel and download main.cpp and the sample input files into your Project03 directory.  At terminal window prompt, use the unzip utility to uncompress the files. 

 

For example:             unzip  NameOfZipFileHere

to unzip the files into your current directory.

Since this project is worth five points, you have been given five input files to test your program. 

Running the Preview Script on blackhawk

Run the preview script by typing the following in a blackhawk terminal window command prompt

/home/work/cpe212data/project03/preview03.bash

This script will run both the Sample Solution AND your project03 executable program on the complete set of input files, and it compares the outputs of the two programs line by line to identify errors in your program's outputs.  Make sure that the output of your program exactly matches the output of the Sample Solution.

 

<Project03 Compilation Instructions>

This project consists of three C++ files so you do not want to compile and link these files manually.  The makefile contains the sequence of commands required to compile and assemble (link) your executable program.  The provided file works on blackhawk.  So, for this assignment, all you must do to compile the program is to use the following command at the Linux command line

make

which will create an executable named  project03 from the provided files main.cpp and the files you have written. 

If your program compiled successfully, you may then type

./project03   NameOfInputFile

to execute your program assuming that the input file is located in the same directory with the executable.   (For example,   ./project03  p03input1.txt  )

 

To force all files to be recompiled and relinked, type the following sequence of commands at the Linux prompt.

make clean

make

<Project03 Include File Constraints>

 

On Project03, the following include files are permitted within your stack.cpp file. 

 

#include <iostream>

#include <new>

#include "stack.h"

 

No additional include files are allowed!!!

Failure to follow these directions will result in zero (0) credit on this assignment.

<Project03 Debugging Assistance >

Your program must be fully commented (including variable and parameter declarations, function descriptions, descriptions of logical blocks of code, etc.)  in order to receive debugging assistance from the instructor and teaching assistants.  See Angel for an example of an acceptable commenting style.

 

<Project03 Hints>

See stack.h for a description of the methods of the Stack ADT.

Once again, I recommend creating an Empty Framework of function definitions that compiles first – before adding any code to any function.

Some functions such as the constructor Stack(), destructor ~Stack(), Push() and Pop() are critical operations that must be functional in order to test other operations ( Size(), Capacity(), Max(), Min(), etc.).  Make sure that these critical operations work first before adding code for any non-critical  operations.

 

<Important Project03 Submission Instructions>

Below is a list of the files you must submit.  It is very important that you use the correct file names: [lowercase letters, no spaces, no underscores] in order for your program to compile and execute.

stack.cpp                  (write and submit this file using the information from stack.h)

 

A COMPLETE SUBMISSION is one that includes the specified file as an attachment to the your submission.   All other submissions will be considered to be incomplete.

INCOMPLETE SUBMISSIONS will receive zero credit (0 points) on this assignment.

DO NOT USE A FILE COMPRESSION PROGRAM     (.zip, .tar, etc. are not allowed)

Failure to satisfy this requirement will result in zero credit (0 points) on this assignment.

(3) Do not modify or submit the file named main.cpp or stack.h !!!       

Failure to satisfy this requirement will result in zero credit (0 points) on this assignment.

(4)  All output to the monitor (stdout) will be performed by the code provided in main.cpp

 

NOTE:  Your project submission will be automatically graded so it is EXTREMELY IMPORTANT that you READ and FOLLOW the project directions.

 

Submit only  the specified files  via the Project03 assignment on Canvas.   

Submisssions by email receive ZERO CREDIT (0 points)!!!

Submissions that do not compile receive ZERO CREDIT (0 points)!!!